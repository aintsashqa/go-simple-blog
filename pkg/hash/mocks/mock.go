// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package mock_hash is a generated GoMock package.
package mock_hash

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHashProvider is a mock of HashProvider interface
type MockHashProvider struct {
	ctrl     *gomock.Controller
	recorder *MockHashProviderMockRecorder
}

// MockHashProviderMockRecorder is the mock recorder for MockHashProvider
type MockHashProviderMockRecorder struct {
	mock *MockHashProvider
}

// NewMockHashProvider creates a new mock instance
func NewMockHashProvider(ctrl *gomock.Controller) *MockHashProvider {
	mock := &MockHashProvider{ctrl: ctrl}
	mock.recorder = &MockHashProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHashProvider) EXPECT() *MockHashProviderMockRecorder {
	return m.recorder
}

// Make mocks base method
func (m *MockHashProvider) Make(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Make", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Make indicates an expected call of Make
func (mr *MockHashProviderMockRecorder) Make(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*MockHashProvider)(nil).Make), arg0)
}

// Compare mocks base method
func (m *MockHashProvider) Compare(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compare indicates an expected call of Compare
func (mr *MockHashProviderMockRecorder) Compare(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockHashProvider)(nil).Compare), arg0, arg1)
}
