// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabasePrivoder is a mock of DatabasePrivoder interface
type MockDatabasePrivoder struct {
	ctrl     *gomock.Controller
	recorder *MockDatabasePrivoderMockRecorder
}

// MockDatabasePrivoderMockRecorder is the mock recorder for MockDatabasePrivoder
type MockDatabasePrivoderMockRecorder struct {
	mock *MockDatabasePrivoder
}

// NewMockDatabasePrivoder creates a new mock instance
func NewMockDatabasePrivoder(ctrl *gomock.Controller) *MockDatabasePrivoder {
	mock := &MockDatabasePrivoder{ctrl: ctrl}
	mock.recorder = &MockDatabasePrivoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabasePrivoder) EXPECT() *MockDatabasePrivoderMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockDatabasePrivoder) Exec(arg0 context.Context, arg1 string, arg2 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockDatabasePrivoderMockRecorder) Exec(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDatabasePrivoder)(nil).Exec), varargs...)
}

// Get mocks base method
func (m *MockDatabasePrivoder) Get(arg0 context.Context, arg1 interface{}, arg2 string, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockDatabasePrivoderMockRecorder) Get(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabasePrivoder)(nil).Get), varargs...)
}

// Select mocks base method
func (m *MockDatabasePrivoder) Select(arg0 context.Context, arg1 interface{}, arg2 string, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockDatabasePrivoderMockRecorder) Select(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDatabasePrivoder)(nil).Select), varargs...)
}

// QueryRow mocks base method
func (m *MockDatabasePrivoder) QueryRow(arg0 context.Context, arg1 interface{}, arg2 string, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockDatabasePrivoderMockRecorder) QueryRow(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDatabasePrivoder)(nil).QueryRow), varargs...)
}
